syntax = "proto3";
package petri.feeburner;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "feeburner/params.proto";
import "feeburner/total_burned_petris_amount.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/merlin-network/petri/x/feeburner/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/petri/feeburner/params";
  }

  // TotalBurnedPetrisAmount queries total amount of burned petri fees.
  rpc TotalBurnedPetrisAmount(QueryTotalBurnedPetrisAmountRequest)
      returns (QueryTotalBurnedPetrisAmountResponse) {
    option (google.api.http).get =
        "/petri/feeburner/total_burned_petris_amount";
  }
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryTotalBurnedPetrisAmountRequest is request type for the
// Query/QueryTotalBurnedPetrisAmount method.
message QueryTotalBurnedPetrisAmountRequest {}

// QueryTotalBurnedPetrisAmountResponse is response type for the
// Query/QueryTotalBurnedPetrisAmount method.
message QueryTotalBurnedPetrisAmountResponse {
  TotalBurnedPetrisAmount total_burned_petris_amount = 1
      [ (gogoproto.nullable) = false ];
}

// this line is used by starport scaffolding # 3
